import requests

def get_cookie_site(sock, username, password):
    """
    function that return the cookie by using the username and password (site)
    :param sock: the socket
    :param username: the username
    :param password: the password
    :return: the cookie
    :rtype: str
    """
    key = ""
    URL = 'http://glitter.org.il/user'
    postdata = [username, password]
    # get the cookie by using the login parameters
    resp = requests.post(URL, json=postdata)
    key = resp.text
    # extract the cookie
    key = key.split("sparkle")
    key = key[1]
    key = key.split('"')
    key = key[2]
    return key

def get_cookie_app(sock, user_id, my_id):
    """
    function that gives you the cookie by using only the user id (you can get the user id by the username) (app)
    the function working only if its the first time you got the cookie ( cause of the friend request works once)
    if the cookie is not exist because the account is not logged in in the site soo its will return not looged on site
    :param sock: the scoket
    :param user_id: the user id of the account you want
    :param my_id: your id
    :return: the cookie
    """
    key = ""
    # build the request
    request = '410#{gli&&er}[' + my_id + ',' + user_id + ']##'
    recv = send(request, sock)
    key = extract_cookie(recv)      # gets the important information
    return key

def extract_cookie(msg):
    """
    function that extract only the important data from the massage received (the cookie or the already friend massage)
    :param msg: the msg received
    :return: the important data (cookie / not looged in in website / #410 ( already friend)
    :rtype: str
    """
    msg = msg.split(": ")
    msg = msg[1]
    msg = msg.split("{")
    msg = msg[0]
    return msg

def send(send_msg, sock):
    """
    function that sends the request and return the answer
    :param send_msg: the request
    :param sock: socket
    :return: the answer
    :rtype: str
    """
    send_msg = send_msg.encode()
    sock.send(send_msg)
    msg = sock.recv(1024)
    msg = msg.decode()
    return msg
