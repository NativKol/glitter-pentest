def clear_buffer(sock, msg):
    """function that clean the buffer by spamming recv until the next important massage comes"""
    while msg[-2] != '#':
        msg = sock.recv(1024)
        msg = msg.decode()

def show_feed(id, sock):
    """
    function that prints the feed and return the list of id's
    :param id: the account id of the feed you would like to print
    :param sock: the socket
    :return: a list with the id's of the post
    :rtype: list
    """
    list_id = []    # list of all the id's
    # id = "887"
    # build request
    msg = '440#{gli&&er}' + id + '##'
    recv = send(msg, sock)
    clear_buffer(sock, recv)
    # build request             (only 4 glits because thats the limit the site can show)
    msg = '500#{gli&&er}{"feed_owner_id":' + id + ',"end_date":"2021-06-19T07:45:12.497Z","glit_count":4}##'
    recv = send(msg, sock)
    clear_buffer(sock, recv)
    list_id = extract_feed(recv)
    return list_id

def extract_feed(msg):
    """
    function that extract the feed content with date and id and prints it
    :param msg: the feed answer from the server (#505)
    :return: a list with the id's of the post
    :rtype: list
    """
    # INITIALIZE
    date = ""
    content = ""
    glit_id = ""
    final_feed = ""

    msg = msg.split("[")
    #print(msg)
    msg = msg[1]
    msg = msg.split("{")
    for i in range(1, len(msg) - 2):        # going through posts
        text = msg[i]
        # extract headers
        text = text.split(",")
        date = text[5]
        content = text[6]
        id = text[8]
        # extract id
        if id[-1] == ']':
            id = id[:-2]
        else:
            id = id[:-1]
        id = id.split(":")
        id = id[1]
        msg[i] = id
        # extract date
        date = date.split('"')
        date = date[3]
        date = date.split("T")
        date = date[0]
        # extract content
        content = content.split(":")
        content = content[1]
        # build feed
        text = str(i) + '. ' + content + ' (' + date + ')'
        final_feed += text + '\n'
        # print(text)
    return msg, final_feed

def send(send_msg, sock):
    """
    function that sends the request and return the answer
    :param send_msg: the request
    :param sock: socket
    :return: the answer
    :rtype: str
    """
    send_msg = send_msg.encode()
    sock.send(send_msg)
    msg = sock.recv(1024)
    msg = msg.decode()
    return msg