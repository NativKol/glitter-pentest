def login(sock, username):
    """
    function that login into account without the password
    :param sock: the socket
    :param username: the username you want to connect to
    :return: the user id
    :rtype: str
    """
    password = " "
    checksum = 0

    print("Logging in...")
    # the login request
    send_msg = '100#{gli&&er}{"user_name":"' + username + '","password":"' + password + '","enable_push_notifications":true}##'
    send_msg = send_msg.encode()
    sock.send(send_msg)
    recv = sock.recv(1024)
    recv = recv.decode()
    checksum += extractChecksum(recv)       # gets the target checksum
    send_msg = send_msg.decode()
    checksum -= calcChecksum(send_msg)      # gets the current checksum and calc the remains checksum
    password = createPassword(checksum)     # gets the new password
    checksum = connect(sock, username, password)        # actual login to account
    return str(checksum)

def connect(sock, username, password):
    """
    function that actual connect and login to account with username and password
    taken from login.py
    :param sock: socket
    :param username: the username
    :param password: the password
    :return: the user id
    :rtype: str
    """
    # the login request
    send_msg = '100#{gli&&er}{"user_name":"' + username + '","password":"' + password + '","enable_push_notifications":true}##'
    send_msg = send_msg.encode()
    sock.send(send_msg)
    msg = sock.recv(1024)
    msg = msg.decode()
    send_msg = send_msg.decode()
    checksum = calcChecksum(send_msg)
    send_msg = '110#{gli&&er}' + str(checksum) + '##'   # build the checksum(ascii) request
    send_msg = send_msg.encode()
    sock.send(send_msg)
    msg = sock.recv(1024)
    msg = msg.decode()
    checksum = calcID(msg)
    send_msg = '310#{gli&&er}' + str(checksum) + '##'   # build the checksum(id) request
    send_msg = send_msg.encode()
    sock.send(send_msg)
    msg = sock.recv(1024)
    msg = msg.decode()
    return str(checksum)

def createPassword(checksum):
    """
    function that create new password with the same ascii value by adding letters with same sum
    :param checksum: the checksum value the password should have
    :return: the new code
    :rtype: str
    """
    code = " "
    # ord of " " means the ascii value of space
    while checksum > ord("A"):      # because all of the valid values is after space in ascii table
        code += " "
        checksum -= ord(" ")
    code += chr(checksum)
    return code

def extractChecksum(msg):
    """
    function that extract the checksum i need to get
    :param msg: the recv answer
    :return: the checksum
    :rtype: int
    """
    msg = msg.split(": ")
    msg = msg[1]
    msg = msg.split("{")
    msg = msg[0]
    return int(msg)

def calcChecksum(msg):
    """
    function that calc the checksum by extract the username and password and adding the ascii values together
    :param msg: the msg that i sent
    :return: the checksum
    :rtype: int
    """
    # initialize
    count = 0
    checksum = ""
    username = ""
    password = ""
    # extract only the username and password for the checksum
    msg = msg.split("{")
    msg = msg[2]
    msg = msg.split(":")
    username = msg[1]
    password = msg[2]
    username = username.split('"')
    password = password.split('"')
    username = username[1]
    password = password[1]
    checksum = username + password
    # calc the checksum by adding every ascii value together
    for letter in range(len(checksum)):
        count += ord(checksum[letter])

    return count

def calcID(msg):
    """
    function that extract the id from the msg received
    :param msg: the msg that received
    :return: the id
    :rtype: int
    """
    msg = msg.split("{")
    msg = msg[2]
    msg = msg.split(":")
    msg = msg[5]
    msg = msg.split(",")
    return msg[0]
